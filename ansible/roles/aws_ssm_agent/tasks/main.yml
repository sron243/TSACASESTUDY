---
# AWS SSM Agent Role - Main Tasks
# This role installs and configures AWS Systems Manager Agent on EC2 instances

- name: Check if SSM Agent is already installed
  stat:
    path: /usr/bin/amazon-ssm-agent
  register: ssm_agent_check

- name: Install SSM Agent on Amazon Linux 2
  yum:
    name: amazon-ssm-agent
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - ansible_distribution == "Amazon"
    - not ssm_agent_check.stat.exists
  become: yes

- name: Install SSM Agent on RHEL/CentOS
  yum:
    name: amazon-ssm-agent
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Amazon"
    - not ssm_agent_check.stat.exists
  become: yes

- name: Install SSM Agent on Ubuntu/Debian
  apt:
    name: snapd
    state: present
    update_cache: yes
  when: 
    - ansible_os_family == "Debian"
    - not ssm_agent_check.stat.exists
  become: yes

- name: Install SSM Agent via snap on Ubuntu/Debian
  snap:
    name: amazon-ssm-agent
    state: present
    classic: yes
  when: 
    - ansible_os_family == "Debian"
    - not ssm_agent_check.stat.exists
  become: yes

- name: Create SSM Agent configuration directory
  file:
    path: /etc/amazon/ssm
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Configure SSM Agent
  template:
    src: amazon-ssm-agent.json.j2
    dest: /etc/amazon/ssm/amazon-ssm-agent.json
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart ssm_agent

- name: Enable SSM Agent service
  systemd:
    name: amazon-ssm-agent
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Wait for SSM Agent to be ready
  wait_for:
    timeout: 60
  when: ssm_agent_check.stat.exists or ansible_os_family == "RedHat" or ansible_os_family == "Debian"

- name: Verify SSM Agent status
  command: systemctl status amazon-ssm-agent
  register: ssm_status
  changed_when: false
  become: yes

- name: Display SSM Agent status
  debug:
    msg: "SSM Agent is {{ 'running' if 'active (running)' in ssm_status.stdout else 'not running' }}"

- name: Install SSM Session Manager plugin
  get_url:
    url: "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/{{ 'linux_amd64' if ansible_architecture == 'x86_64' else 'linux_arm64' }}/session-manager-plugin.rpm"
    dest: /tmp/session-manager-plugin.rpm
    mode: '0644'
  when: ansible_os_family == "RedHat"

- name: Install SSM Session Manager plugin on RedHat
  yum:
    name: /tmp/session-manager-plugin.rpm
    state: present
  when: ansible_os_family == "RedHat"
  become: yes

- name: Install SSM Session Manager plugin on Ubuntu
  get_url:
    url: "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/{{ 'linux_amd64' if ansible_architecture == 'x86_64' else 'linux_arm64' }}/session-manager-plugin.deb"
    dest: /tmp/session-manager-plugin.deb
    mode: '0644'
  when: ansible_os_family == "Debian"

- name: Install SSM Session Manager plugin on Ubuntu
  apt:
    deb: /tmp/session-manager-plugin.deb
    state: present
  when: ansible_os_family == "Debian"
  become: yes

- name: Clean up temporary files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/session-manager-plugin.rpm
    - /tmp/session-manager-plugin.deb
  become: yes

- name: Configure SSM Agent for cross-account access
  template:
    src: ssm-agent-config.j2
    dest: /etc/amazon/ssm/ssm-agent-config.json
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart ssm_agent
  when: cross_account_access is defined and cross_account_access

- name: Test SSM connectivity
  aws_ssm:
    targets: "{{ ansible_host }}"
    document_name: AWS-RunShellScript
    parameters:
      commands: "echo 'SSM connectivity test successful'"
  delegate_to: localhost
  run_once: true
  when: ssm_test_connectivity is defined and ssm_test_connectivity 